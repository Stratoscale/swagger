// Code generated by mockery v1.0.0. DO NOT EDIT.
package restapi

import context "context"
import middleware "github.com/go-openapi/runtime/middleware"
import mock "github.com/stretchr/testify/mock"
import store "github.com/Stratoscale/swagger/example/restapi/operations/store"

// MockStoreAPI is an autogenerated mock type for the StoreAPI type
type MockStoreAPI struct {
	mock.Mock
}

// InventoryGet provides a mock function with given fields: ctx, params
func (_m *MockStoreAPI) InventoryGet(ctx context.Context, params store.InventoryGetParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, store.InventoryGetParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// OrderCreate provides a mock function with given fields: ctx, params
func (_m *MockStoreAPI) OrderCreate(ctx context.Context, params store.OrderCreateParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, store.OrderCreateParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// OrderDelete provides a mock function with given fields: ctx, params
func (_m *MockStoreAPI) OrderDelete(ctx context.Context, params store.OrderDeleteParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, store.OrderDeleteParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// OrderGet provides a mock function with given fields: ctx, params
func (_m *MockStoreAPI) OrderGet(ctx context.Context, params store.OrderGetParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, store.OrderGetParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}
