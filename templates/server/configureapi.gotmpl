// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .APIPackage }}

import (
    "context"
    "crypto/tls"
    "net/http"
    "log"
    "fmt"

    "github.com/go-openapi/errors"
    "github.com/go-openapi/runtime"
    "github.com/go-openapi/runtime/middleware"
    "github.com/go-openapi/runtime/security"
    "github.com/tylerb/graceful"
    "github.com/Stratoscale/swagger/query"

    {{range .DefaultImports}}{{printf "%q" .}}
    {{end}}
    {{range $key, $value := .Imports}}{{$key}} {{ printf "%q" $value}}
    {{end}}
)
{{ $package := .Package }}



{{ range .OperationGroups -}}
//go:generate mockery -name {{ pascalize .Name}}API -inpkg

// {{ pascalize .Name }}API {{ .Description }}
type {{ pascalize .Name }}API interface {
{{ range .Operations -}}
    {{ if .Description -}}
    // {{ pascalize .Name }} is {{ .Description }}
    {{ end -}}
    {{ pascalize .Name }}(ctx context.Context, params {{.Package}}.{{ pascalize .Name }}Params) middleware.Responder
{{ end -}}
}
{{ end }}

// Config is configuration for Handler
type Config struct {
    {{ range .OperationGroups -}}
    {{ pascalize .Name }}API
    {{ end -}}
    Logger func(string, ...interface{})
    // InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
    // The middleware executes after routing but before authentication, binding and validation
    InnerMiddleware func(http.Handler) http.Handler
    Auth Auth
}

// Auth functions
type Auth interface {
    APIKey(token string) (interface{}, error)
    Basic(user, password string) (interface{}, error)
    OAuth2(token string, scopes []string) (interface{}, error)
    // AuthStore is a function that stores authentication in the context object
    Store(context.Context, interface{}) context.Context
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := {{.Package}}.New{{ pascalize .Name }}API(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	{{ range .Consumes -}}
	{{ if .Implementation -}}
	api.{{ pascalize .Name }}Consumer = {{ .Implementation }}
	{{ else }}
	api.{{ pascalize .Name }}Consumer = runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
		return errors.NotImplemented("{{.Name}} consumer has not yet been implemented")
	})
	{{ end -}}
	{{ end -}}
	{{ range .Produces -}}
	{{ if .Implementation -}}
	api.{{ pascalize .Name }}Producer = {{ .Implementation }}
	{{ else -}}
	api.{{ pascalize .Name }}Producer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
		return errors.NotImplemented("{{.Name}} producer has not yet been implemented")
	})
	{{ end -}}
	{{ end -}}

	{{ range .SecurityDefinitions -}}
	{{ if .IsBasicAuth -}}
	// Applies when the Authorization header is set with the Basic scheme
	if c.Auth == nil || c.Auth.Basic == nil {
        return nil, fmt.Errorf("BasicAuth Authenticator was not defined")
	}
	if c.Auth == nil || c.Auth.Store == nil {
        return nil, fmt.Errorf("Auth store function was not defined")
	}
	api.{{ pascalize .ID }}Auth = func(user string, pass string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error) {
		return c.Auth.Basic(user pass)
	}
	{{ end -}}
	{{ if .IsAPIKeyAuth -}}
	// Applies when the "{{ .Name }}" {{ .Source }} is set
	if c.Auth == nil || c.Auth.APIKey == nil {
        return nil, fmt.Errorf("APIKey Authenticator was not defined")
	}
	if c.Auth == nil || c.Auth.Store == nil {
        return nil, fmt.Errorf("Auth store function was not defined")
	}
	api.{{ pascalize .ID }}Auth = func(token string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error) {
		return c.Auth.APIKey(token)
	}
	{{ end }}
	{{ if .IsOAuth2 -}}
	if c.Auth == nil || c.Auth.OAuth2 == nil {
        return nil, fmt.Errorf("OAuth2 Authenticator was not defined")
	}
	if c.Auth == nil || c.Auth.Store == nil {
        return nil, fmt.Errorf("Auth store function was not defined")
	}
	api.{{ pascalize .ID }}Auth = func(token string, scopes []string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error) {
		return c.Auth.OAuth2(token, scopes)
	}
	{{ end -}}
	{{ end -}}

	{{ if .SecurityDefinitions -}}
	// Set your custom authorizer if needed. Default one is security.Authorized()
	// Expected interface runtime.Authorizer
	//
	// Example:
	// api.APIAuthorizer = security.Authorized()
	{{ end -}}

	{{ range .Operations -}}
	api.{{if ne .Package $package}}{{pascalize .Package}}{{end}}{{ pascalize .Name }}Handler = {{.Package}}.{{ pascalize .Name }}HandlerFunc(func({{ if .WithContext }}ctx context.Context, {{ end }}params {{.Package}}.{{ pascalize .Name }}Params{{if .Authorized}}, principal interface{}{{end}}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		{{ if .Authorized -}}
		ctx = c.Auth.Store(ctx, principal)
		{{ end -}}
		return c.{{pascalize .Package}}API.{{pascalize .Name}}(ctx, params)
	})
	{{ end -}}

    api.ServerShutdown = func() {  }
	return api.Serve(c.InnerMiddleware), nil
}

{{ if .Models -}}
// Query parse functions for all the models
// Those can be used to extract database query from the http path's query string
var (
    {{ range .Models -}}
    {{ if and (not .Items) .Properties -}}
    {{ pascalize .Name}}QueryParse = query.MustNewBuilder(&query.Config{Model: models.{{ pascalize .Name}}{}}).ParseRequest
    {{ end -}}
    {{ end -}}
)
{{ end -}}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

