// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "os"
  "net/http"

  "github.com/go-openapi/runtime"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/errors"
  "github.com/go-openapi/validate"
  cr "github.com/go-openapi/runtime/client"

  strfmt "github.com/go-openapi/strfmt"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

/*{{ pascalize .Name }}Params contains all the parameters to send to the API endpoint
for the {{ humanize .Name }} operation typically these are written to a http.Request
*/
type {{ pascalize .Name }}Params struct {

  {{ range .Params }}/*{{ pascalize .Name }}{{if .Description }}
  {{ blockcomment .Description }}

  {{ end }}*/
  {{ pascalize .ID }} {{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}*{{ end }}{{ if not .IsFileParam }}{{ .GoType }}{{ else }}os.File{{end}}
  {{ end }}

  {{ pascalize .TimeoutName }} time.Duration
}

// WriteToRequest writes these params to a swagger request
func ({{ .ReceiverName }} *{{ pascalize .Name }}Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

  if err := r.SetTimeout({{ .ReceiverName }}.{{ pascalize .TimeoutName }}); err != nil {
    return err
  }
  var res []error
  {{range .Params}}

  {{if not (or .IsArray .IsMap .IsBodyParam) }}
  {{ if and .IsNullable (not .AllowEmptyValue) }}if {{ .ValueExpression }} != nil { {{ end}}
  {{ if .IsQueryParam }}
  // query param {{ .Name }}
  {{ if .IsNullable }}var qr{{ pascalize .Name }} {{ .GoType }}
  if {{ .ValueExpression }} != nil {
    qr{{ pascalize .Name }} = *{{ .ValueExpression }}
  }{{ else }}qr{{ pascalize .Name }} := {{ .ValueExpression }}{{ end}}
  q{{ pascalize .Name}} := {{ if .Formatter }}{{ .Formatter }}(qr{{ pascalize .Name }}){{ else }}qr{{ pascalize .Name }}{{ if .IsCustomFormatter }}.String(){{end}}{{end}}{{ if not .AllowEmptyValue }}
  if q{{ pascalize .Name }} != "" { {{ end }}
  if err := r.SetQueryParam({{ printf "%q" .Name }}, q{{ pascalize .Name }}); err != nil {
    return err
  }
  {{ if not .AllowEmptyValue }}}{{ end }}
  {{ else if .IsPathParam }}
  // path param {{ .Name }}
  if err := r.SetPathParam({{ printf "%q" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if .IsNullable }}*{{end}}{{ .ValueExpression }}){{ else }}{{ if .IsNullable }}*{{end}}{{ .ValueExpression }}{{ if .IsCustomFormatter }}.String(){{end}}{{end}}); err != nil {
    return err
  }
  {{ else if .IsHeaderParam }}
  // header param {{ .Name }}
  if err := r.SetHeaderParam({{ printf "%q" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if .IsNullable }}*{{end}}{{ .ValueExpression }}){{ else }}{{ if .IsNullable }}*{{end}}{{ .ValueExpression }}{{ if .IsCustomFormatter }}.String(){{end}}{{end}}); err != nil {
    return err
  }
  {{ else if .IsFormParam }}
  {{ if .IsFileParam }}
  {{ if .IsNullable}}
  if {{ .ValueExpression }} != nil {
  {{end}}
    // form file param {{ .Name }}
    if err := r.SetFileParam({{ printf "%q" .Name }}, {{ if not .IsNullable}}&{{end}}{{ .ValueExpression }}); err != nil {
      return err
    }
  {{ if .IsNullable}}
  }
  {{ end }}
  {{ else }}
  // form param {{ .Name }}
  {{ if .IsNullable }}var fr{{ pascalize .Name }} {{ .GoType }}
  if {{ .ValueExpression }} != nil {
    fr{{ pascalize .Name }} = *{{ .ValueExpression }}
  }{{ else }}fr{{ pascalize .Name }} := {{ .ValueExpression }}{{ end}}
  f{{ pascalize .Name}} := {{ if .Formatter }}{{ .Formatter }}(fr{{ pascalize .Name }}){{ else }}fr{{ pascalize .Name }}{{ if .IsCustomFormatter }}.String(){{end}}{{end}}{{ if not .AllowEmptyValue }}
  if f{{ pascalize .Name }} != "" { {{ end }}
  if err := r.SetFormParam({{ printf "%q" .Name }}, f{{ pascalize .Name }}); err != nil {
    return err
  }
  {{ if not .AllowEmptyValue }}}{{ end }}
  {{ end }}
  {{ end }}
  {{ if and .IsNullable (not .AllowEmptyValue) }}}{{end}}
  {{else if .IsArray }}
  {{ if not .IsBodyParam }}{{ if .Child }}{{ if or .Child.Formatter .Child.IsCustomFormatter }}var values{{ pascalize .Name }} []string
  for _, v := range {{ if and (not .IsArray) (not .IsMap) (not .IsStream) (.IsNullable) }}*{{end}}{{ .ValueExpression }} {
    values{{ pascalize .Name }} = append(values{{ pascalize .Name }}, {{ .Child.Formatter }}{{ if .Child.Formatter }}({{ end }}v{{ if .Child.IsCustomFormatter }}.String(){{ end }}{{ if .Child.Formatter }}){{ end }})
  }
  {{ else }}values{{ pascalize .Name }} := {{ if and (not .IsArray) (not .IsStream) (not .IsMap) (.IsNullable) }}*{{end}}{{ .ValueExpression }}{{ end }}
  {{ else }}values{{ pascalize .Name }} := {{ if and (not .IsArray) (not .IsStream) (not .IsMap) (.IsNullable) }}*{{end}}{{ .ValueExpression }}{{ end }}
  joined{{ pascalize .Name}} := swag.JoinByFormat(values{{ pascalize .Name }}, "{{.CollectionFormat}}")
  {{ if .IsQueryParam }}// query array param {{ .Name }}
  if err := r.SetQueryParam({{ printf "%q" .Name }}, joined{{ pascalize .Name }}...); err != nil {
    return err
  }
  {{ else if and .IsFormParam }}// form array param {{ .Name }}
  if err := r.SetFormParam({{ printf "%q" .Name }}, joined{{ pascalize .Name }}...); err != nil {
    return err
  }
  {{ else if and .IsPathParam }}// path array param {{ .Name }}
  // SetPathParam does not support variadric arguments, since we used JoinByFormat
  // we can send the first item in the array as it's all the items of the previous
  // array joined together
  if err := r.SetPathParam({{ printf "%q" .Name }}, joined{{ pascalize .Name }}[0]); err != nil {
    return err
  }
  {{ end }}{{ end }}

  {{ end }}

  {{if .IsBodyParam}}
  {{ if and .Schema.IsNullable (not .HasDiscriminator) }}if {{ .ValueExpression }} != nil {
    if err := r.SetBodyParam({{ .ValueExpression }}); err != nil {
      return err
    }
  }{{ end }}

  {{end}}
  {{end}}
  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}
