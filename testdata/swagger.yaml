swagger: '2.0'
info:
  description: This is a simplified version of the sample server Petstore server.
  version: 1.0.0
  title: Swagger Simple Petstore

schemes: [http]
host: localhost:5000
basePath: /api
consumes: [application/json]
produces: [application/json]

tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders

securityDefinitions:
  token:
    type: apiKey
    in: header
    name: Cookie

security:
  - token: []

paths:

  /pets:

    post:
      tags: [pet]
      summary: Add a new pet to the store
      operationId: PetCreate
      parameters:
        - in: body
          name: pet
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Pet'
        405:
          description: Invalid input
      security:
        - token: [admin]

    get:
      tags: [pet]
      summary: List pets
      operationId: PetList
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value

  /pets/{petId}:

    put:
      tags: [pet]
      summary: Update an existing pet
      operationId: PetUpdate
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
        - in: body
          name: pet
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        201:
          description: Updated successfully
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
        - token: [admin]


    get:
      tags: [pet]
      summary: Get pet by it's ID
      operationId: PetGet

      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found

    delete:
      tags: [pet]
      summary: Deletes a pet
      description: ''
      operationId: PetDelete

      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Deleted successfully
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
        - token: [admin]

  /store/inventory:

    get:
      tags: [store]
      summary: Returns pet inventories by status
      operationId: InventoryGet
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32

  /store/order:

    post:
      tags: [store]
      summary: Place an order for a pet
      operationId: OrderCreate

      parameters:
        - in: body
          name: order
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order

  /store/order/{orderId}:

    get:
      tags: [store]
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
      operationId: OrderGet

      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found

    delete:
      tags: [store]
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
      operationId: OrderDelete

      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        204:
          description: Deleted successfully
        400:
          description: Invalid ID supplied
        404:
          description: Order not found

definitions:

  Pet:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
        x-go-custom-tag: gorm:"primary_key" query:"filter,sort"
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
        x-go-custom-tag: query:"filter,sort"
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
        x-go-custom-tag: query:"filter,sort"

  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string

  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
